{"version":3,"file":"api-request.js","sourceRoot":"","sources":["../../src/base-api/api-request.ts"],"names":[],"mappings":";;AAAA,6DAA0D;AAC1D,yCAAuC;AAGvC;IAAA;QACW,UAAK,GAAoB,IAAI,KAAK,EAAY,CAAC;IAoD1D,CAAC;IAjDU,0BAAK,GAAZ,UAAqB,UAAsC,EAAE,UAAgB;QACzE,IAAM,OAAO,GACT,IAAI,uCAAiB,EAAE;aAClB,wBAAwB,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,CAAC;QAErE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC;IAChB,CAAC;IAGM,6BAAQ,GAAf,UAAgB,IAAY,EAAE,KAAU,EAAE,aAA4B;QAClE,IAAM,QAAQ,GAAG,IAAI,oBAAQ,CAAC;YAC1B,IAAI,MAAA;YACJ,KAAK,OAAA;YACL,gBAAgB,EAAE,uCAAiB,CAAC,kBAAkB,CAAC,aAAa,CAAC;SACxE,CAAC,CAAC;QAEH,IAAI,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC/B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,qFAAqF;IAC9E,4BAAO,GAAd,UAAe,IAAY;QACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,OAAO,IAAI,CAAC;IAChB,CAAC;IAEM,0BAAK,GAAZ,UAAa,YAAqB;QAC9B,IAAI,YAAY,EAAE;YACd,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAChE,IAAI,KAAK,GAAG,CAAC,CAAC,EAAE;gBACZ,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;aAC/B;SACJ;aAAM;YACH,IAAI,CAAC,KAAK,GAAG,IAAI,KAAK,EAAY,CAAC;SACtC;IACL,CAAC;IAEO,kCAAa,GAArB,UAAsB,OAAwB;gCACjC,QAAQ;YACb,IAAM,aAAa,GAAG,OAAK,KAAK,CAAC,IAAI,CAAC,UAAC,QAAQ,IAAK,OAAA,QAAQ,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,EAA/B,CAA+B,CAAC,CAAC;YACrF,IAAI,aAAa,EAAE;gBACf,aAAa,CAAC,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,CAAC;gBAC3D,aAAa,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC;aACxC;iBAAM;gBACH,OAAK,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC7B;;;QAPL,KAAqB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO;YAAvB,IAAI,QAAQ,gBAAA;oBAAR,QAAQ;SAQhB;IACL,CAAC;IACL,iBAAC;AAAD,CAAC,AArDD,IAqDC;AArDY,gCAAU","sourcesContent":["import { ApiRequestBuilder } from './api-request-builder';\r\nimport { ApiQuery } from './api-query';\r\nimport { QueryOperator } from './query-operator';\r\n\r\nexport class ApiRequest {\r\n    public query: Array<ApiQuery> = new Array<ApiQuery>();\r\n    public sort?: string;\r\n\r\n    public where<TModel>(expression: (model: TModel) => boolean, parameters?: any): ApiRequest {\r\n        const queries =\r\n            new ApiRequestBuilder()\r\n                .buildQueryFromExpression(expression.toString(), parameters);\r\n\r\n        this.updateQueries(queries);\r\n        return this;\r\n    }\r\n\r\n\r\n    public useQuery(name: string, value: any, queryOperator: QueryOperator) {\r\n        const apiQuery = new ApiQuery({\r\n            name,\r\n            value,\r\n            apiQueryOperator: ApiRequestBuilder.getByQueryOperator(queryOperator),\r\n        });\r\n\r\n        this.updateQueries([apiQuery]);\r\n        return this;\r\n    }\r\n    \r\n    // TODO: This will become a builder as well soon...  ie: request.orderBy(x => x.name)\r\n    public orderBy(sort: string): ApiRequest {\r\n        this.sort = sort;\r\n        return this;\r\n    }\r\n\r\n    public clear(propertyName?: string): void {\r\n        if (propertyName) {\r\n            const index = this.query.map(q => q.name).indexOf(propertyName);\r\n            if (index > -1) {\r\n                this.query.splice(index, 1);\r\n            }\r\n        } else {\r\n            this.query = new Array<ApiQuery>();\r\n        }\r\n    }\r\n\r\n    private updateQueries(queries: Array<ApiQuery>): void {\r\n        for (let newQuery of queries) {\r\n            const existingQuery = this.query.find((apiQuery) => apiQuery.name === newQuery.name);\r\n            if (existingQuery) {\r\n                existingQuery.apiQueryOperator = newQuery.apiQueryOperator;\r\n                existingQuery.value = newQuery.value;\r\n            } else {\r\n                this.query.push(newQuery);\r\n            }\r\n        }\r\n    }\r\n}\r\n"]}